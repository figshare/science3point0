<?php

/*
  Google XML Sitemaps Generator for BuddyPress
 ==============================================================================
 
 This generator will create a sitemaps.org compliant sitemap for BuddyPress.
 Currently activity, groups, forums, profiles are supported.
 
 Based upon GoogleSitemapGenerator by Arne at www.arnebrachhold.de

 ==============================================================================
 Plugin Name: BuddyPress Sitemap Generator
 Plugin URI: http://wordpress.org/extend/plugins/buddypress-sitemap-generator/
 Description: [BETA] This plugin will generate a sitemapindex and various component sitemap xml files for search engines and indexing of BuddyPress.
 Author: rich fuller - etiviti (rich!) - based upon work by Arne Brachhold
 Author URI: http://buddypress.org/developers/nuprn1/
 License: GNU GENERAL PUBLIC LICENSE 3.0 http://www.gnu.org/licenses/gpl.txt
 Version: 0.0.4
 Text Domain: bp-sitemap
 Site Wide Only: true
*/


//TODO
//we need auto-prio based on favorites, replies, memberships, topics
//need to paginate the sitemaps if over 50k
//rewrite - each component into classes so we can indepen build
//hook into proper dates
 

//
// You can override the following constants in wp-config.php if you feel the need to.
//
// ***** DO NOT EDIT THIS FILE *****
//

// set your own cron time - requires plugin to be deactivated and activated
// recommended valid wp values are: hourly, twicedaily, daily
if ( !defined( 'BP_SITEMAP_CRON_INTERVAL' ) ) {
	define( 'BP_SITEMAP_CRON_INTERVAL', 'daily' );
}

/**
 * Loader class for the Google Sitemap Generator
 *
 * This class takes care of the sitemap plugin and tries to load the different parts as late as possible.
 * On normal requests, only this small class is loaded. When the sitemap needs to be rebuild, the generator itself is loaded.
 * The last stage is the user interface which is loaded when the administration page is requested.
 */
class BPGoogleSitemapGeneratorLoader {
	/**
	 * Enabled the sitemap plugin with registering all required hooks
	 *
	 * If the bpsm_command and bpsm_key GET params are given, the function will init the generator to rebuild the sitemap.
	 */
	function Enable() {
		
		//futuristic version number for other plug-in hooks?
		define( 'BP_SITEMAP_VERSION', '0.0.4' );
		
		//since we are naughty and look up sql - we should warn against db changes
		define( 'BP_SITEMAP_EXPECTED_VERSION', '1.2.1' );
		define( 'BP_SITEMAP_EXPECTED_GROUPS_DB_VERSION', '1900' );
		define( 'BP_SITEMAP_EXPECTED_XPROFILE_DB_VERSION', '1850' );
		define( 'BP_SITEMAP_EXPECTED_ACTIVITY_DB_VERSION', '2060' );
		define( 'BP_SITEMAP_EXPECTED_FRIENDS_DB_VERSION', '1800' );
		
		
		//Register the sitemap creator to buddypress...
		add_action('admin_menu', array('BPGoogleSitemapGeneratorLoader', 'RegisterAdminPage'));
				
		//Additional links on the plugin page
		add_filter('plugin_row_meta', array('BPGoogleSitemapGeneratorLoader', 'RegisterPluginLinks'),10,2);

		//WP Cron hook
		add_action('bpsm_build_cron', array('BPGoogleSitemapGeneratorLoader', 'CallBuildSitemap'),1,0);

		//WP Cron hook
		add_action('bpsm_wp_cron', array('BPGoogleSitemapGeneratorLoader', 'CallBuildCronSitemap'),1,0);
		
		//External build hook
		add_action('bpsm_rebuild', array('BPGoogleSitemapGeneratorLoader', 'CallBuildNowRequest'),1,0);
		
		//Check if this is a BUILD-NOW request (key will be checked later)
		if(!empty($_GET["bpsm_command"]) && !empty($_GET["bpsm_key"])) {
			BPGoogleSitemapGeneratorLoader::CallCheckForManualBuild();
		}
		
		//Check if the result of a ping request should be shown
		if(!empty($_GET["bpsm_ping_service"])) {
			BPGoogleSitemapGeneratorLoader::CallShowPingResult();
		}
	}

	/**
	 * Registers the plugin in the admin menu system
	 */
	function RegisterAdminPage() {
		
		if (function_exists('add_options_page')) {
			add_options_page(__('BuddyPress Sitemap Generator','bp-sitemap'), __('BuddyPress Sitemap','bp-sitemap'), 10, BPGoogleSitemapGeneratorLoader::GetBaseName(), array('BPGoogleSitemapGeneratorLoader','CallHtmlShowOptionsPage'));
		}

	}
	
	function RegisterPluginLinks($links, $file) {
		$base = BPGoogleSitemapGeneratorLoader::GetBaseName();
		if ($file == $base) {
			$links[] = '<a href="options-general.php?page=' . BPGoogleSitemapGeneratorLoader::GetBaseName() .'">' . __('Settings','bp-sitemap') . '</a>';
		}
		return $links;
	}
	
	/**
	 * Invokes the HtmlShowOptionsPage method of the generator
	 */
	function CallHtmlShowOptionsPage() {
		if(BPGoogleSitemapGeneratorLoader::LoadPlugin()) {
			$gs = &BPGoogleSitemapGenerator::GetInstance();
			$gs->HtmlShowOptionsPage();
		}
	}
	
	/**
	 * Invokes the CheckForAutoBuild method of the generator
	 */
	function CallBuildNowRequest() {
		if(BPGoogleSitemapGeneratorLoader::LoadPlugin()) {
			$gs = &BPGoogleSitemapGenerator::GetInstance();
			$gs->BuildNowRequest();
		}
	}
	
	/**
	 * Invokes the CheckForAutoBuild method of the generator
	 */
	function CallBuildCronSitemap() {
		if(BPGoogleSitemapGeneratorLoader::LoadPlugin()) {
			$gs = &BPGoogleSitemapGenerator::GetInstance();
			$gs->BuildNowCronRequest();
		}
	}
	
	/**
	 * Invokes the BuildSitemap method of the generator
	 */
	function CallBuildSitemap() {
		if(BPGoogleSitemapGeneratorLoader::LoadPlugin()) {
			$gs = &BPGoogleSitemapGenerator::GetInstance();
			$gs->BuildSitemap();
		}
	}
	
	/**
	 * Invokes the CheckForManualBuild method of the generator
	 */
	function CallCheckForManualBuild() {
		if(BPGoogleSitemapGeneratorLoader::LoadPlugin()) {
			$gs = &BPGoogleSitemapGenerator::GetInstance();
			$gs->CheckForManualBuild();
		}
	}
	
	/**
	 * Invokes the ShowPingResult method of the generator
	 */
	function CallShowPingResult() {
		if(BPGoogleSitemapGeneratorLoader::LoadPlugin()) {
			$gs = &BPGoogleSitemapGenerator::GetInstance();
			$gs->ShowPingResult();
		}
	}
	
	/**
	 * Loads the actual generator class and tries to raise the memory and time limits if not already done by WP
	 *
	 * @return boolean true if run successfully
	 */
	function LoadPlugin() {
		
		$mem = abs(intval(@ini_get('memory_limit')));
		if($mem && $mem < 32) {
			@ini_set('memory_limit', '32M');
		}
		
		$time = abs(intval(@ini_get("max_execution_time")));
		if($time != 0 && $time < 120) {
			@set_time_limit(120);
		}
		
		if(!class_exists("BPGoogleSitemapGenerator")) {
			
			$path = trailingslashit(dirname(__FILE__));
			
			if(!file_exists( $path . 'bp-sitemap-core.php')) return false;
			require_once($path. 'bp-sitemap-core.php');
		}

		BPGoogleSitemapGenerator::Enable();
		return true;
	}
	
	/**
	 * Returns the plugin basename of the plugin (using __FILE__)
	 *
	 * @return string The plugin basename, "sitemap" for example
	 */
	function GetBaseName() {
		return plugin_basename(__FILE__);
	}
	
	/**
	 * Returns the name of this loader script, using __FILE__
	 *
	 * @return string The __FILE__ value of this loader script
	 */
	function GetPluginFile() {
		return __FILE__;
	}
	
	/**
	 * Returns the plugin version
	 *
	 * Uses the WP API to get the meta data from the top of this file (comment)
	 *
	 * @return string The version like 3.1.1
	 */
	function GetVersion() {
		if(!isset($GLOBALS["bpsm_version"])) {
			if(!function_exists('get_plugin_data')) {
				if(file_exists(ABSPATH . 'wp-admin/includes/plugin.php')) require_once(ABSPATH . 'wp-admin/includes/plugin.php'); //2.3+
				else return "0.ERROR";
			}
			$data = get_plugin_data(__FILE__, false, false);
			$GLOBALS["bpsm_version"] = $data['Version'];
		}
		return $GLOBALS["bpsm_version"];
	}
}

//
// Hook into BuddyPress!
//

if ( defined( 'BP_VERSION' ) ) {
	BPGoogleSitemapGeneratorLoader::Enable();
} else {
	add_action( 'bp_init', array("BPGoogleSitemapGeneratorLoader","Enable"),1000,0);
}



//
// Hook into WP-Cron!
//

//on plugin activation register cron
register_activation_hook(__FILE__, 'bpsitemap_activation');

function bpsitemap_activation() {
	wp_schedule_event(time()+900, BP_SITEMAP_CRON_INTERVAL, 'bpsm_wp_cron');
}

//on plugin deactivation remove cron
register_deactivation_hook(__FILE__, 'bpsitemap_deactivation');

function bpsitemap_deactivation() {
	wp_clear_scheduled_hook('bpsm_wp_cron');
}



?>